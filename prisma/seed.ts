// prisma/seed.ts - InvenStock Multi-Tenant System V2.0
// Generated by scripts/merge-seeds.js
// Do not edit manually - modify individual seed files instead

import { PrismaClient } from "@prisma/client";
import { hashPassword } from "../lib/auth";
import { generateInviteCode } from "../lib/invite-code";

import { seedUsers } from "./seeds/users.seed";
import { seedOrganizations } from "./seeds/organizations.seed";
import { seedDemoData } from "./seeds/demo-data.seed";

const prisma = new PrismaClient();

async function main() {
  console.log("🌱 Starting InvenStock Multi-Tenant Seed...");
  
  try {
    // Clear existing data in development
    if (process.env.NODE_ENV === 'development') {
      console.log("🧹 Clearing existing data...");
      await clearExistingData();
    }

    // USER MANAGEMENT
    console.log("👥 Creating users...");
    
    
    const userResult = await seedUsers(prisma);
    console.log(`✅ Users: ${userResult.totalUsers}`);
    const adminUser = userResult.adminUser;
    

    // ORGANIZATION MANAGEMENT
    console.log("🏢 Creating organizations...");
    
    
    const orgResult = await seedOrganizations(prisma);
    console.log(`✅ Organizations: ${orgResult.totalOrganizations}, Departments: ${orgResult.totalDepartments}`);
    

    // DEMO DATA (always enabled for production readiness)
    console.log("🎭 Creating complete dataset...");
    
    
    const demoResult = await seedDemoData(prisma);
    console.log(`✅ ${demoResult.message}`);
    

    // VERIFICATION
    console.log("🔍 Verifying system...");
    const verification = await verifySystem(prisma);
    
    console.log("="+"=".repeat(50));
    console.log("🎉 InvenStock Multi-Tenant System Ready!");
    console.log(`👥 Users: ${verification.users}`);
    console.log(`🏢 Organizations: ${verification.organizations}`);
    console.log(`🏬 Departments: ${verification.departments}`);
    console.log(`📋 Org Memberships: ${verification.orgUsers}`);
    console.log(`📊 Audit Logs: ${verification.auditLogs}`);
    console.log("="+"=".repeat(50));
    console.log("🚀 Next: npm run dev");
    console.log("🔑 Admin Login: admin / admin123");

  } catch (error) {
    console.error("💥 Seed error:", error.message);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

async function clearExistingData() {
  try {
    // Clear in reverse dependency order
    await prisma.auditLog.deleteMany({});
    await prisma.department.deleteMany({});
    await prisma.organizationUser.deleteMany({});
    await prisma.organization.deleteMany({});
    await prisma.user.deleteMany({});
    
    console.log("✅ Existing data cleared");
  } catch (error) {
    console.warn("⚠️  Could not clear data:", error.message);
  }
}

async function createCompleteUserSet(prisma: PrismaClient) {
  try {
    const hashedPassword = await hashPassword("demo123");
    
    // Additional users for production readiness
    await prisma.user.createMany({
      data: [
        {
          username: "manager.hospital",
          password: hashedPassword,
          firstName: "ผู้จัดการ",
          lastName: "โรงพยาบาล",
          email: "manager@hospital.com",
          status: "ACTIVE",
          isActive: true,
        },
        {
          username: "staff.pharmacy",
          password: hashedPassword,
          firstName: "พนักงาน",
          lastName: "ร้านยา",
          email: "staff@pharmacy.com", 
          status: "ACTIVE",
          isActive: true,
        },
      ],
      skipDuplicates: true,
    });
  } catch (error) {
    console.warn("⚠️  Could not create additional users:", error.message);
  }
}

async function verifySystem(prisma: PrismaClient) {
  try {
    const [users, organizations, departments, orgUsers, auditLogs] = await Promise.all([
      prisma.user.count(),
      prisma.organization.count(),
      prisma.department.count(),
      prisma.organizationUser.count(),
      prisma.auditLog.count(),
    ]);

    return { users, organizations, departments, orgUsers, auditLogs };
  } catch (error) {
    console.error("❌ Verification failed:", error.message);
    return { users: 0, organizations: 0, departments: 0, orgUsers: 0, auditLogs: 0 };
  }
}

main()
  .catch((e) => {
    console.error("💥 FATAL ERROR:");
    console.error(e.message);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

export { prisma };