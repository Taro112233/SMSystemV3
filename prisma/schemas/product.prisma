// prisma/schemas/product.prisma

// ===== PRODUCT ATTRIBUTE CATEGORY (Definition) =====
model ProductAttributeCategory {
  id             String   @id @default(cuid())
  organizationId String
  
  // Category Info
  key            String   // "dosage_form", "drug_type", "manufacturer"
  label          String   // "รูปแบบยา", "ประเทศผู้ผลิต"
  description    String?
  
  // Display & Validation
  displayOrder   Int      @default(0)
  isRequired     Boolean  @default(false)
  isActive       Boolean  @default(true)
  
  // User Tracking
  createdBy         String
  createdBySnapshot Json?
  updatedBy         String?
  updatedBySnapshot Json?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // ✅ Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  options        ProductAttributeOption[]  // ✅ แยกเป็น table ต่างหาก
  productAttributes ProductAttribute[]     // ✅ เชื่อมกับ Product
  
  @@unique([organizationId, key])
  @@index([organizationId, isActive])
  @@map("product_attribute_categories")
}

// ===== PRODUCT ATTRIBUTE OPTION (Values for each category) =====
model ProductAttributeOption {
  id         String   @id @default(cuid())
  categoryId String
  
  value      String   // "ยาเม็ด", "ยาน้ำ", "ไทย", "ญี่ปุ่น"
  label      String?  // Optional display label
  sortOrder  Int      @default(0)
  isActive   Boolean  @default(true)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // ✅ Relations
  category   ProductAttributeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  productAttributes ProductAttribute[]
  
  @@unique([categoryId, value])
  @@index([categoryId, isActive])
  @@map("product_attribute_options")
}

// ===== PRODUCT ATTRIBUTE (Junction table connecting Product + Category + Option) =====
model ProductAttribute {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  optionId   String
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // ✅ Relations
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   ProductAttributeCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  option     ProductAttributeOption @relation(fields: [optionId], references: [id], onDelete: Restrict)
  
  @@unique([productId, categoryId])  // Each product can have only one value per category
  @@index([productId])
  @@index([categoryId])
  @@index([optionId])
  @@map("product_attributes")
}

// ===== UPDATED PRODUCT MODEL =====
model Product {
  id             String   @id @default(cuid())
  organizationId String
  
  // Basic Info
  code           String
  name           String
  genericName    String?
  description    String?
  
  // ❌ REMOVED: attributes Json?
  // ✅ REPLACED WITH: Normalized relations
  
  baseUnit       String
  isActive       Boolean  @default(true)
  
  createdBy         String
  createdBySnapshot Json?
  updatedBy         String?
  updatedBySnapshot Json?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // ✅ Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  attributes     ProductAttribute[]  // ✅ NEW: Junction table relation
  stocks         Stock[]
  
  @@unique([organizationId, code])
  @@index([organizationId, isActive])
  @@map("products")
}