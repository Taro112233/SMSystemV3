// This file is auto-generated. Do not edit manually.
// Edit files in prisma/schemas/ directory instead.
// Last generated: 2025-09-09T14:36:47.154Z
// InvenStock - Multi-Tenant Inventory Management System V1.0

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // For connection pooling
}


// ==========================================
// BASE SCHEMA - V1.0
// ==========================================

// prisma/schemas/base.prisma
// ===== CORE ENUMS & BASE TYPES - InvenStock V1.0 =====

// ===== USER & ORGANIZATION ENUMS =====
enum UserStatus {
  PENDING    // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô email
  ACTIVE     // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  SUSPENDED  // ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  INACTIVE   // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
}

enum InvitationStatus {
  PENDING    // ‡∏£‡∏≠‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö
  ACCEPTED   // ‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
  DECLINED   // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
  EXPIRED    // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
}

enum OrganizationStatus {
  ACTIVE     // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  SUSPENDED  // ‡∏£‡∏∞‡∏á‡∏±‡∏ö
  TRIAL      // ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ
}

// ===== PRODUCT ENUMS =====
enum UnitType {
  PIECE      // ‡∏ä‡∏¥‡πâ‡∏ô
  BOX        // ‡∏Å‡∏•‡πà‡∏≠‡∏á
  BOTTLE     // ‡∏Ç‡∏ß‡∏î
  PACK       // ‡πÅ‡∏û‡πá‡∏Ñ
  STRIP      // ‡πÅ‡∏ú‡∏á
  TUBE       // ‡∏´‡∏•‡∏≠‡∏î
  VIAL       // ‡πÑ‡∏ß‡∏≠‡∏±‡∏•
  AMPOULE    // ‡πÅ‡∏≠‡∏°‡∏û‡∏π‡∏•
  KG         // ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
  GRAM       // ‡∏Å‡∏£‡∏±‡∏°
  LITER      // ‡∏•‡∏¥‡∏ï‡∏£
  ML         // ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏•‡∏¥‡∏ï‡∏£
  TABLET     // ‡πÄ‡∏°‡πá‡∏î
  CAPSULE    // ‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏π‡∏•
  CUSTOM     // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
}

enum ProductStatus {
  ACTIVE     // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  INACTIVE   // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  DISCONTINUED // ‡πÄ‡∏•‡∏¥‡∏Å‡∏ú‡∏•‡∏¥‡∏ï
  RESTRICTED   // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
}

// ===== ROLE SYSTEM ENUMS =====
enum OrganizationRole {
  MEMBER  // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ö‡∏¥‡∏Å ‡∏à‡πà‡∏≤‡∏¢ ‡πÅ‡∏Å‡πâ‡∏™‡∏ï‡πá‡∏≠‡∏Å
  ADMIN   // Member + CRUD ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î + ‡∏™‡∏£‡πâ‡∏≤‡∏á category + ‡πÄ‡∏ä‡∏¥‡∏ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  OWNER   // Admin + CRUD department + ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
}

// ===== STOCK TRANSACTION ENUMS =====
enum TransactionType {
  // ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  RECEIVE_PURCHASE     // ‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠
  RECEIVE_DONATION     // ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ
  RECEIVE_RETURN       // ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô
  RECEIVE_TRANSFER     // ‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô
  
  // ‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  DISPENSE_SALE        // ‡∏à‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢
  DISPENSE_USE         // ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  DISPENSE_TRANSFER    // ‡∏à‡πà‡∏≤‡∏¢‡πÇ‡∏≠‡∏ô
  DISPENSE_WASTE       // ‡∏ó‡∏¥‡πâ‡∏á/‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
  
  // ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏ï‡πá‡∏≠‡∏Å
  ADJUST_INCREASE      // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°
  ADJUST_DECREASE      // ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î
  ADJUST_COUNT         // ‡∏ô‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å
  
  // ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
  RESERVE              // ‡∏à‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  UNRESERVE           // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
}

// ===== TRANSFER SYSTEM ENUMS =====
enum TransferStatus {
  DRAFT      // ‡∏£‡πà‡∏≤‡∏á
  PENDING    // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  APPROVED   // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
  PREPARING  // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°
  READY      // ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á
  SHIPPED    // ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
  DELIVERED  // ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß
  RECEIVED   // ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
  CANCELLED  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
  REJECTED   // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
}

enum TransferItemStatus {
  PENDING
  APPROVED  
  DISPATCHED
  RECEIVED
  CANCELLED
}

enum TransferType {
  INTERNAL   // ‡πÇ‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
  EXTERNAL   // ‡πÇ‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
  RETURN     // ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  LOAN       // ‡∏¢‡∏∑‡∏°
  BORROW     // ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°
}

// ===== NOTIFICATION ENUMS =====
enum NotificationType {
  TRANSFER_REQUEST     // ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  TRANSFER_APPROVED    // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
  TRANSFER_REJECTED    // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
  STOCK_LOW           // ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥
  STOCK_EXPIRED       // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  USER_INVITED        // ‡πÄ‡∏ä‡∏¥‡∏ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  ROLE_ASSIGNED       // ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ Role
  SYSTEM_ALERT        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
}

enum NotificationStatus {
  UNREAD     // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô
  READ       // ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  ARCHIVED   // ‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
}

// ===== AUDIT LOG ENUMS =====
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  APPROVE
  REJECT
  TRANSFER
  EXPORT
  IMPORT
}

// ===== UI ENUMS FOR COLORS & ICONS =====
enum ColorTheme {
  BLUE         // #3B82F6 - ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
  GREEN        // #10B981 - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
  RED          // #EF4444 - ‡∏™‡∏µ‡πÅ‡∏î‡∏á
  YELLOW       // #F59E0B - ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
  PURPLE       // #8B5CF6 - ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
  PINK         // #EC4899 - ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π
  INDIGO       // #6366F1 - ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°
  TEAL         // #14B8A6 - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ü‡πâ‡∏≤
  ORANGE       // #F97316 - ‡∏™‡∏µ‡∏™‡πâ‡∏°
  GRAY         // #6B7280 - ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
  SLATE        // #475569 - ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
  EMERALD      // #059669 - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏£‡∏Å‡∏ï
}

enum IconType {
  // Department Icons
  BUILDING     // üè¢ ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  HOSPITAL     // üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
  PHARMACY     // üíä ‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏≤
  WAREHOUSE    // üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  LABORATORY   // üß™ ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πá‡∏ö
  
  // Product Category Icons
  PILL         // üíä ‡∏¢‡∏≤‡πÄ‡∏°‡πá‡∏î
  BOTTLE       // üçº ‡∏¢‡∏≤‡∏ô‡πâ‡∏≥
  SYRINGE      // üíâ ‡∏¢‡∏≤‡∏â‡∏µ‡∏î
  BANDAGE      // ü©π ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå
  STETHOSCOPE  // ü©∫ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå
  
  // Role Icons
  CROWN        // üëë ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
  SHIELD       // üõ°Ô∏è ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
  PERSON       // üë§ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  EYE          // üëÅÔ∏è ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  GEAR         // ‚öôÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö
  
  // General Icons
  BOX          // üì¶ ‡∏Å‡∏•‡πà‡∏≠‡∏á
  FOLDER       // üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
  TAG          // üè∑Ô∏è ‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö
  STAR         // ‚≠ê ‡∏î‡∏≤‡∏ß
  HEART        // ‚ù§Ô∏è ‡∏´‡∏±‡∏ß‡πÉ‡∏à
  CIRCLE       // ‚ö™ ‡∏ß‡∏á‡∏Å‡∏•‡∏°
  SQUARE       // ‚¨ú ‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
  TRIANGLE     // üî∫ ‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
}

// ==========================================
// USER SCHEMA - V1.0
// ==========================================

// prisma/schemas/user.prisma
// ===== USER MANAGEMENT SCHEMA - InvenStock V1.0 (CORRECTED) =====

model User {
  id          String     @id @default(cuid())
  email       String?             // ‚úÖ Optional for notifications/recovery
  username    String     @unique  // ‚úÖ Primary login credential
  password    String              // bcrypt hashed
  
  // Personal Information
  firstName   String
  lastName    String
  phone       String?
  
  // Account Status
  status      UserStatus @default(PENDING)
  isActive    Boolean    @default(true)
  emailVerified Boolean  @default(false)
  
  // Security
  lastLogin   DateTime?
  
  // Timestamps
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  organizationUsers     OrganizationUser[]
  sentInvitations       UserInvitation[] @relation("InviterUser")
  receivedInvitations   UserInvitation[] @relation("InviteeUser")
  stockTransactions     StockTransaction[]
  transfersRequested    Transfer[] @relation("RequesterUser")
  transfersApproved     Transfer[] @relation("ApproverUser") 
  transfersDispatched   Transfer[] @relation("DispatcherUser")
  transfersReceived     Transfer[] @relation("ReceiverUser")
  notifications         Notification[]
  auditLogs            AuditLog[]
  
  @@index([email])
  @@index([username])  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö primary login
  @@index([status])
  @@index([isActive])
  @@map("users")
}

// User Invitations for joining organizations
model UserInvitation {
  id             String           @id @default(cuid())
  organizationId String
  inviterId      String
  inviteeId      String?          // null if inviting by username/email
  
  // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á email ‡πÅ‡∏•‡∏∞ username invitation
  inviteeEmail   String?          // Can invite by email
  inviteeUsername String?         // Can invite by username
  
  // Invitation Details
  roleId         String?          // Role to assign upon acceptance
  message        String?          // Personal invitation message
  
  // Status
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime         // Invitation expiry
  
  // Response
  respondedAt    DateTime?
  response       String?          // Reason for decline
  
  // Timestamps
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relations
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter        User             @relation("InviterUser", fields: [inviterId], references: [id])
  invitee        User?            @relation("InviteeUser", fields: [inviteeId], references: [id])
  
  // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÉ‡∏ô 2: email ‡∏´‡∏£‡∏∑‡∏≠ username
  // ‡πÅ‡∏•‡∏∞ unique constraint ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô
  @@unique([organizationId, inviteeEmail])
  @@unique([organizationId, inviteeUsername])
  @@index([status])
  @@index([expiresAt])
  @@map("user_invitations")
}

// ==========================================
// ORGANIZATION SCHEMA - V1.0
// ==========================================

// prisma/schemas/organization.prisma
// ===== MULTI-TENANT ORGANIZATION SCHEMA - InvenStock V1.0 =====

model Organization {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique // URL-friendly identifier
  description String?
  
  // Branding & Appearance
  logo        String?            // URL to logo
  primaryColor String?           // Hex color code
  
  // Contact Information
  email       String?
  phone       String?
  website     String?
  address     String?
  
  // Settings
  status      OrganizationStatus @default(ACTIVE)
  timezone    String             @default("Asia/Bangkok")
  currency    String             @default("THB")
  
  // Feature Settings
  allowDepartments    Boolean    @default(true)
  
  // Timestamps
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  // Relations
  users               OrganizationUser[]
  departments         Department[]
  productCategories   ProductCategory[]
  productTypes        ProductType[]     // Added for custom product types
  productForms        ProductForm[]     // Added for custom product forms
  products            Product[]
  stocks              Stock[]
  stockTransactions   StockTransaction[] // üî• ADDED MISSING RELATION
  transfers           Transfer[]
  invitations         UserInvitation[]
  notifications       Notification[]
  settings            OrganizationSetting[]
  auditLogs          AuditLog[]
  
  @@index([slug])
  @@index([status])
  @@map("organizations")
}

// User-Organization Relationship (Many-to-Many)
model OrganizationUser {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  
  // Membership Details
  isOwner        Boolean      @default(false)
  joinedAt       DateTime     @default(now())
  lastActiveAt   DateTime?
  
  // Status
  isActive       Boolean      @default(true)
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles          OrganizationRole @default(MEMBER)
  
  @@unique([organizationId, userId])
  @@index([isActive])
  @@map("organization_users")
}

// Hierarchical Departments
model Department {
  id             String       @id @default(cuid())
  organizationId String
  parentId       String?      // For hierarchical structure
  
  // Department Details
  name           String
  code           String       // Short code (e.g., "IT", "HR")
  description    String?
  color          ColorTheme?    // ‡πÅ‡∏ó‡∏ô String?
  icon           IconType?      // ‡πÅ‡∏ó‡∏ô String?
  
  // Settings
  isActive       Boolean      @default(true)
  
  // Audit Fields
  createdBy      String       // User who created
  updatedBy      String?      // User who last updated
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent         Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children       Department[] @relation("DepartmentHierarchy")
  stocks         Stock[]
  transfersFrom  Transfer[]   @relation("FromDepartment")
  transfersTo    Transfer[]   @relation("ToDepartment")
  
  @@unique([organizationId, code])
  @@index([parentId])
  @@index([isActive])
  @@map("departments")
}

// Organization Settings (Key-Value Store)
model OrganizationSetting {
  id             String       @id @default(cuid())
  organizationId String
  key            String       // Setting key (e.g., "stock.low_threshold")
  value          String       // JSON string value
  type           String       @default("string") // string, number, boolean, json
  
  // Metadata
  description    String?
  isEditable     Boolean      @default(true)
  
  // Audit Fields
  createdBy      String       // User who created
  updatedBy      String?      // User who last updated
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, key])
  @@index([key])
  @@map("organization_settings")
}

// ==========================================
// PRODUCT SCHEMA - V1.0
// ==========================================

// prisma/schemas/product.prisma
// ===== PRODUCT MANAGEMENT SCHEMA - InvenStock V1.0 =====

// Custom Product Categories per Organization
model ProductCategory {
  id             String       @id @default(cuid())
  organizationId String
  parentId       String?      // For hierarchical structure
  
  // Category Details
  name           String
  code           String?      // Category code
  description    String?
  color          ColorTheme?    // ‡πÅ‡∏ó‡∏ô String?
  icon           IconType?      // ‡πÅ‡∏ó‡∏ô String?
  
  // Settings
  isActive       Boolean      @default(true)
  sortOrder      Int          @default(0)
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent         ProductCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children       ProductCategory[] @relation("CategoryHierarchy")
  products       Product[]
  
  @@unique([organizationId, name])
  @@index([parentId])
  @@index([sortOrder])
  @@map("product_categories")
}

// Custom Product Types per Organization
model ProductType {
  id             String       @id @default(cuid())
  organizationId String
  
  // Type Details
  name           String       // ‡πÄ‡∏ä‡πà‡∏ô "‡∏¢‡∏≤‡πÄ‡∏°‡πá‡∏î", "‡∏¢‡∏≤‡∏ô‡πâ‡∏≥", "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå"
  code           String?      // ‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  description    String?
  color          ColorTheme?    // ‡πÅ‡∏ó‡∏ô String?
  icon           IconType?      // ‡πÅ‡∏ó‡∏ô String?
  
  // Settings
  isActive       Boolean      @default(true)
  sortOrder      Int          @default(0)
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  products       Product[]
  
  @@unique([organizationId, name])
  @@index([isActive])
  @@map("product_types")
}

// Custom Product Forms per Organization  
model ProductForm {
  id             String       @id @default(cuid())
  organizationId String
  
  // Form Details
  name           String       // ‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏°‡πá‡∏î", "‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏π‡∏•", "‡∏ô‡πâ‡∏≥", "‡∏Ñ‡∏£‡∏µ‡∏°"
  code           String?      // ‡∏£‡∏´‡∏±‡∏™‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
  description    String?
  
  // Settings
  isActive       Boolean      @default(true)
  sortOrder      Int          @default(0)
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  products       Product[]
  
  @@unique([organizationId, name])
  @@index([isActive])
  @@map("product_forms")
}

// Products with Custom Organization Fields
model Product {
  id             String          @id @default(cuid())
  organizationId String
  categoryId     String?         // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  typeId         String?         // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (custom per org)
  formId         String?         // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (custom per org)
  
  // Product Identification - ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  orgProductCode String          // ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ (required)
  barcode        String?         // Barcode/QR code
  
  // Product Details - ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  name           String          // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (required)
  description    String?         // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (optional)
  supplier       String?         // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ (optional)
  
  // Product Specifications - ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  strength       String?         // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô "500mg")
  volume         String?         // ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô "100ml")
  qtyPerBox      Int             @default(1) // ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á (required, default 1)
  unit           UnitType        @default(PIECE)
  
  // Inventory Settings
  minStockLevel  Int             @default(0)     // Minimum stock alert
  maxStockLevel  Int?            // Maximum stock limit
  
  // Status & Settings - ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  isActive       Boolean         @default(true)  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (required)
  
  // Audit Fields
  createdBy      String          // User who created
  updatedBy      String?         // User who last updated
  
  // Timestamps
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  category       ProductCategory? @relation(fields: [categoryId], references: [id])
  productType    ProductType?    @relation(fields: [typeId], references: [id])
  productForm    ProductForm?    @relation(fields: [formId], references: [id])
  batches        ProductBatch[]
  stocks         Stock[]
  transferItems  TransferItem[]
  
  @@unique([organizationId, orgProductCode]) // ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
  @@index([isActive])
  @@index([categoryId])
  @@index([typeId])
  @@index([formId])
  @@index([barcode])
  @@map("products")
}

// Product Batches for Lot/Expiry/Price Tracking - ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
model ProductBatch {
  id             String       @id @default(cuid())
  productId      String
  
  // Batch Details - ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  batchNumber    String       // Lot/Batch number (required)
  expiryDate     DateTime?    // ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (optional)
  
  // Pricing - ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÅ‡∏ï‡πà‡∏•‡∏∞ lot ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
  costPrice      Float        @default(0) // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á (required)
  sellingPrice   Float        @default(0) // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πà‡∏≠‡∏á (required)
  
  // Quantity Tracking
  currentQty     Int          @default(0) // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  
  // Status
  isActive       Boolean      @default(true)
  
  // Audit Fields
  createdBy      String       // User who created
  updatedBy      String?      // User who last updated
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  stockTransactions StockTransaction[]
  transferItems  TransferItem[]
  
  @@unique([productId, batchNumber]) // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ batch number ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
  @@index([expiryDate])
  @@index([isActive])
  @@index([costPrice])
  @@map("product_batches")
}

// ==========================================
// STOCK SCHEMA - V1.0
// ==========================================

// prisma/schemas/stock.prisma
// ===== STOCK MANAGEMENT SCHEMA - InvenStock V1.0 =====

// Stock Tracking per Department
model Stock {
  id             String       @id @default(cuid())
  organizationId String
  productId      String
  departmentId   String?      // null = organization-wide stock
  
  // Stock Quantities
  totalQuantity  Int          @default(0)  // Total available
  reservedQty    Int          @default(0)  // Reserved for transfers
  
  // Stock Levels
  minStockLevel  Int          @default(0)  // Department-specific minimum
  maxStockLevel  Int?         // Department-specific maximum
  reorderPoint   Int          @default(0)  // Auto-reorder trigger
  reorderQty     Int?         // Auto-reorder quantity
  
  // Audit Fields
  createdBy      String       // User who created
  updatedBy      String?      // User who last updated
  
  // Timestamps
  lastCountDate  DateTime?    // Last physical count
  lastMovement   DateTime?    // Last stock movement
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  department     Department?  @relation(fields: [departmentId], references: [id])
  transactions   StockTransaction[]
  
  @@unique([organizationId, productId, departmentId])
  @@index([minStockLevel])
  @@index([totalQuantity])
  @@map("stocks")
}

// Stock Movement Transactions
model StockTransaction {
  id             String          @id @default(cuid())
  organizationId String
  stockId        String
  batchId        String?         // Link to specific batch
  userId         String
  
  // Transaction Details
  type           TransactionType
  reference      String?         // Reference number/document
  note           String?         // Transaction note
  
  // Quantities
  quantity       Int             // Change in quantity (+/-)
  beforeQty      Int             // Stock before transaction
  afterQty       Int             // Stock after transaction
  
  // Financial
  unitCost       Float           @default(0)
  totalCost      Float           @default(0)
  
  // Related Records
  transferId     String?         // If part of transfer
  transferItemId String?         // Specific transfer item
  
  // Location
  fromLocation   String?         // Source location
  toLocation     String?         // Destination location
  
  // Approval
  approvedBy     String?         // Approver user ID
  approvedAt     DateTime?       // Approval timestamp
  
  // Timestamps
  transactionDate DateTime       @default(now())
  createdAt      DateTime        @default(now())
  
  // Relations
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  stock          Stock           @relation(fields: [stockId], references: [id], onDelete: Cascade)
  batch          ProductBatch?   @relation(fields: [batchId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  transfer       Transfer?       @relation(fields: [transferId], references: [id])
  
  @@index([type])
  @@index([transactionDate])
  @@index([transferId])
  @@index([stockId])
  @@map("stock_transactions")
}

// ==========================================
// TRANSFER SCHEMA - V1.0
// ==========================================

// prisma/schemas/transfer.prisma
// ===== TRANSFER SYSTEM SCHEMA - InvenStock V1.0 =====

// Transfer Requests between Departments/Organizations
model Transfer {
  id                String         @id @default(cuid())
  organizationId    String
  transferNumber    String         // Auto-generated transfer number
  
  // Transfer Type & Direction
  type              TransferType   @default(INTERNAL)
  
  // Source & Destination
  fromDeptId        String?        // Source department
  toDeptId          String?        // Destination department
  fromOrgId         String?        // For external transfers
  toOrgId           String?        // For external transfers
  
  // Transfer Details
  title             String         // Transfer title/purpose
  description       String?        // Detailed description
  priority          String         @default("NORMAL") // HIGH, NORMAL, LOW
  
  // User Workflow
  requesterId       String         // Who requested
  approverId        String?        // Who approved
  dispatcherId      String?        // Who prepared/dispatched
  receiverId        String?        // Who received
  
  // Status & Workflow
  status            TransferStatus @default(DRAFT)
  
  // Quantities & Values
  totalItems        Int            @default(0)
  totalQuantity     Int            @default(0)
  totalValue        Float          @default(0)
  
  // Dates & Times
  requestedDate     DateTime       @default(now())
  requiredDate      DateTime?      // When needed
  approvedDate      DateTime?
  dispatchedDate    DateTime?
  deliveredDate     DateTime?
  receivedDate      DateTime?
  
  // Shipping Info
  shippingMethod    String?        // Delivery method
  trackingNumber    String?        // Tracking reference
  carrier           String?        // Shipping carrier
  
  // Audit Fields
  createdBy         String         // User who created
  updatedBy         String?        // User who last updated
  
  // Timestamps
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  organization      Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  fromDept          Department?    @relation("FromDepartment", fields: [fromDeptId], references: [id])
  toDept            Department?    @relation("ToDepartment", fields: [toDeptId], references: [id])
  requester         User           @relation("RequesterUser", fields: [requesterId], references: [id])
  approver          User?          @relation("ApproverUser", fields: [approverId], references: [id])
  dispatcher        User?          @relation("DispatcherUser", fields: [dispatcherId], references: [id])
  receiver          User?          @relation("ReceiverUser", fields: [receiverId], references: [id])
  items             TransferItem[]
  stockTransactions StockTransaction[]
  
  @@unique([organizationId, transferNumber])
  @@index([status])
  @@index([type])
  @@index([requestedDate])
  @@index([fromDeptId])
  @@index([toDeptId])
  @@map("transfers")
}

// Transfer Items - Products in each transfer
model TransferItem {
  id              String       @id @default(cuid())
  transferId      String
  productId       String
  batchId         String?      // Specific batch if tracked
  
  // Quantities at different stages
  requestedQty    Int          // Initially requested
  approvedQty     Int?         // Approved quantity
  dispatchedQty   Int?         // Actually dispatched
  receivedQty     Int?         // Actually received
  
  // Batch Information
  lotNumber       String?      // Lot/batch number
  expiryDate      DateTime?    // Expiry date
  
  // Pricing (from batch)
  unitPrice       Float        @default(0)
  totalValue      Float        @default(0)
  
  // Item Status
  status          TransferItemStatus @default(PENDING)
  
  // Audit Fields
  createdBy       String       // User who created
  updatedBy       String?      // User who last updated
  
  // Timestamps
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  transfer        Transfer     @relation(fields: [transferId], references: [id], onDelete: Cascade)
  product         Product      @relation(fields: [productId], references: [id])
  batch           ProductBatch? @relation(fields: [batchId], references: [id])
  
  @@index([transferId])
  @@index([productId])
  @@index([status])
  @@map("transfer_items")
}

// ==========================================
// NOTIFICATION SCHEMA - V1.0
// ==========================================

// prisma/schemas/notification.prisma
// ===== NOTIFICATION SYSTEM SCHEMA - InvenStock V1.0 =====

// Real-time Notifications
model Notification {
  id             String             @id @default(cuid())
  organizationId String
  userId         String
  
  // Notification Details
  type           NotificationType
  title          String             // Notification title
  message        String             // Notification content
  
  // Related Records
  relatedId      String?            // ID of related record (transfer, product, etc.)
  relatedType    String?            // Type of related record
  relatedData    String?            // JSON data for the notification
  
  // Action
  actionUrl      String?            // URL to navigate when clicked
  actionLabel    String?            // Button text for action
  
  // Status
  status         NotificationStatus @default(UNREAD)
  priority       String             @default("NORMAL") // HIGH, NORMAL, LOW
  
  // Scheduling
  scheduledFor   DateTime?          // For scheduled notifications
  expiresAt      DateTime?          // Auto-archive date
  
  // Timestamps
  readAt         DateTime?          // When marked as read
  archivedAt     DateTime?          // When archived
  createdAt      DateTime           @default(now())
  
  // Relations
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, status])
  @@index([type])
  @@index([createdAt])
  @@index([organizationId])
  @@map("notifications")
}

// ==========================================
// AUDIT SCHEMA - V1.0
// ==========================================

// prisma/schemas/audit.prisma
// ===== STREAMLINED AUDIT SYSTEM - InvenStock V2.0 =====

// Single Audit Model - Hybrid Approach
model AuditLog {
  id             String @id @default(cuid())
  organizationId String
  userId         String?
  
  // Action Tracking (Dot Notation)
  action         String      // "products.create", "transfers.approve", "users.login"
  resourceId     String?     // ID of affected record
  
  // Smart Payload Storage
  payload        Json?       // Context-aware data based on action type
  
  // Timestamp
  createdAt      DateTime @default(now())
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User? @relation(fields: [userId], references: [id])
  
  // Optimized Indexes
  @@index([organizationId, createdAt])
  @@index([action])
  @@index([resourceId])
  @@map("audit_logs")
}

// ===== PAYLOAD STANDARDS BY ACTION TYPE =====
/*
üîê AUTHENTICATION ACTIONS
"users.login" -> { "ip": "x.x.x.x", "success": true }
"users.logout" -> { "sessionDuration": 3600 }
"users.failed_login" -> { "ip": "x.x.x.x", "reason": "invalid_password" }

üì¶ PRODUCT ACTIONS  
"products.create" -> { "name": "Paracetamol", "code": "PRD001", "category": "Pain Relief" }
"products.update" -> { "changes": {"price": [100, 150], "name": ["old", "new"]} }
"products.delete" -> { "name": "Paracetamol", "code": "PRD001", "hasStock": false }

üìä STOCK ACTIONS
"stock.adjust" -> { "product": "Paracetamol", "from": 100, "to": 150, "reason": "count_correction" }
"stock.receive" -> { "product": "Paracetamol", "qty": 50, "supplier": "ABC Pharma" }
"stock.dispense" -> { "product": "Paracetamol", "qty": 10, "department": "ICU" }

üöö TRANSFER ACTIONS
"transfers.create" -> { "fromDept": "Pharmacy", "toDept": "ICU", "itemCount": 5 }
"transfers.approve" -> { "transferNumber": "TRF-001", "totalValue": 15000 }
"transfers.reject" -> { "transferNumber": "TRF-001", "reason": "insufficient_stock" }
"transfers.receive" -> { "transferNumber": "TRF-001", "receivedItems": 5 }

üë• USER MANAGEMENT
"users.invite" -> { "email": "user@example.com", "role": "Pharmacist" }
"users.role_change" -> { "from": "Staff", "to": "Manager", "reason": "promotion" }
"users.deactivate" -> { "reason": "resignation" }

‚öôÔ∏è SYSTEM ACTIONS
"system.backup" -> { "tables": ["products", "stocks"], "size": "15MB" }
"system.settings_update" -> { "key": "low_stock_threshold", "from": 10, "to": 5 }
"system.bulk_import" -> { "type": "products", "count": 150, "source": "excel" }
*/

// ===== TYPESCRIPT HELPER TYPES =====
/*
// Action definitions
type AuditAction = 
  | `users.${UserAction}`
  | `products.${ProductAction}` 
  | `stock.${StockAction}`
  | `transfers.${TransferAction}`
  | `system.${SystemAction}`;

type UserAction = 'login' | 'logout' | 'failed_login' | 'invite' | 'role_change' | 'deactivate';
type ProductAction = 'create' | 'update' | 'delete' | 'bulk_import';
type StockAction = 'adjust' | 'receive' | 'dispense' | 'count' | 'reserve';
type TransferAction = 'create' | 'approve' | 'reject' | 'dispatch' | 'receive' | 'cancel';
type SystemAction = 'backup' | 'settings_update' | 'bulk_import' | 'cleanup';

// Payload types for type safety
interface AuditPayload {
  'users.login': { ip: string; success: boolean; userAgent?: string };
  'products.create': { name: string; code: string; category?: string };
  'stock.adjust': { product: string; from: number; to: number; reason: string };
  'transfers.approve': { transferNumber: string; totalValue: number; itemCount: number };
  // ... add more as needed
}
*/
