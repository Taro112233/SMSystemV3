// This file is auto-generated. Do not edit manually.
// Edit files in prisma/schemas/ directory instead.
// Last generated: 2025-09-15T18:20:10.319Z
// InvenStock - Multi-Tenant Inventory Management System V1.0

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // For connection pooling
}


// ==========================================
// BASE SCHEMA - V1.0
// ==========================================

// prisma/schemas/base.prisma
// ===== CORE ENUMS & BASE TYPES - Authentication Only =====

// ===== USER & ORGANIZATION ENUMS =====
enum UserStatus {
  PENDING    // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô email
  ACTIVE     // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  SUSPENDED  // ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  INACTIVE   // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
}

enum InvitationStatus {
  PENDING    // ‡∏£‡∏≠‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö
  ACCEPTED   // ‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
  DECLINED   // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
  EXPIRED    // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
}

enum OrganizationStatus {
  ACTIVE     // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  SUSPENDED  // ‡∏£‡∏∞‡∏á‡∏±‡∏ö
  TRIAL      // ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ
}

// ===== ROLE SYSTEM ENUMS =====
enum OrganizationRole {
  MEMBER  // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ö‡∏¥‡∏Å ‡∏à‡πà‡∏≤‡∏¢ ‡πÅ‡∏Å‡πâ‡∏™‡∏ï‡πá‡∏≠‡∏Å
  ADMIN   // Member + CRUD ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î + ‡∏™‡∏£‡πâ‡∏≤‡∏á category + ‡πÄ‡∏ä‡∏¥‡∏ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  OWNER   // Admin + CRUD department + ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
}

enum DepartmentRole {
  VIEWER    // ‡∏î‡∏π‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  USER      // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÄ‡∏ö‡∏¥‡∏Å ‡∏à‡πà‡∏≤‡∏¢ ‡πÅ‡∏Å‡πâ‡∏™‡∏ï‡πá‡∏≠‡∏Å)
  MANAGER   // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏Å (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å)
  ADMIN     // ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏ú‡∏ô‡∏Å (‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å)
}

// ===== UI ENUMS FOR COLORS & ICONS =====
enum ColorTheme {
  BLUE         // #3B82F6 - ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
  GREEN        // #10B981 - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
  RED          // #EF4444 - ‡∏™‡∏µ‡πÅ‡∏î‡∏á
  YELLOW       // #F59E0B - ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
  PURPLE       // #8B5CF6 - ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
  PINK         // #EC4899 - ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π
  INDIGO       // #6366F1 - ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°
  TEAL         // #14B8A6 - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ü‡πâ‡∏≤
  ORANGE       // #F97316 - ‡∏™‡∏µ‡∏™‡πâ‡∏°
  GRAY         // #6B7280 - ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
  SLATE        // #475569 - ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
  EMERALD      // #059669 - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏£‡∏Å‡∏ï
}

enum IconType {
  // Department Icons
  BUILDING     // üè¢ ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  HOSPITAL     // üè• ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
  PHARMACY     // üíä ‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏≤
  WAREHOUSE    // üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  LABORATORY   // üß™ ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πá‡∏ö
  
  // Product Category Icons
  PILL         // üíä ‡∏¢‡∏≤‡πÄ‡∏°‡πá‡∏î
  BOTTLE       // üçº ‡∏¢‡∏≤‡∏ô‡πâ‡∏≥
  SYRINGE      // üíâ ‡∏¢‡∏≤‡∏â‡∏µ‡∏î
  BANDAGE      // ü©π ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå
  STETHOSCOPE  // ü©∫ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå
  
  // Role Icons
  CROWN        // üëë ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
  SHIELD       // üõ°Ô∏è ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
  PERSON       // üë§ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
  EYE          // üëÅÔ∏è ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  GEAR         // ‚öôÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö
  
  // General Icons
  BOX          // üì¶ ‡∏Å‡∏•‡πà‡∏≠‡∏á
  FOLDER       // üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
  TAG          // üè∑Ô∏è ‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö
  STAR         // ‚≠ê ‡∏î‡∏≤‡∏ß
  HEART        // ‚ù§Ô∏è ‡∏´‡∏±‡∏ß‡πÉ‡∏à
  CIRCLE       // ‚ö™ ‡∏ß‡∏á‡∏Å‡∏•‡∏°
  SQUARE       // ‚¨ú ‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
  TRIANGLE     // üî∫ ‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
}

// ==========================================
// USER SCHEMA - V1.0
// ==========================================

// prisma/schemas/user.prisma
// ===== USER MANAGEMENT SCHEMA - Authentication Only =====

model User {
  id          String     @id @default(cuid())
  email       String?    // Optional for notifications/recovery
  username    String     @unique  // Primary login credential
  password    String     // bcrypt hashed
  
  // Personal Information
  firstName   String
  lastName    String
  phone       String?
  
  // Account Status
  status      UserStatus @default(PENDING)
  isActive    Boolean    @default(true)
  emailVerified Boolean  @default(false)
  
  // Security
  lastLogin   DateTime?
  
  // Timestamps
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations (Authentication Only)
  organizationUsers     OrganizationUser[]
  departmentUsers       DepartmentUser[]                        // Department access
  departmentAssignments DepartmentUser[] @relation("DepartmentAssigner") // Assignments made by this user
  sentInvitations       UserInvitation[] @relation("InviterUser")
  receivedInvitations   UserInvitation[] @relation("InviteeUser")
  auditLogs            AuditLog[]
  
  @@index([email])
  @@index([username])
  @@index([status])
  @@index([isActive])
  @@map("users")
}

// Department Access Control
model DepartmentUser {
  id           String         @id @default(cuid())
  departmentId String
  userId       String
  
  // Department-Level Role
  role         DepartmentRole @default(USER)
  
  // Granular Permissions
  canView      Boolean        @default(true)   // View department data
  canEdit      Boolean        @default(false)  // Edit department data
  canApprove   Boolean        @default(false)  // Approve department actions
  canManage    Boolean        @default(false)  // Manage department users
  
  // Assignment Details
  assignedBy   String?        // Who assigned this access
  assignedAt   DateTime       @default(now())
  isActive     Boolean        @default(true)
  
  // Timestamps
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  department   Department     @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  assigner     User?          @relation("DepartmentAssigner", fields: [assignedBy], references: [id])
  
  @@unique([departmentId, userId])
  @@index([isActive])
  @@index([role])
  @@map("department_users")
}

// User Invitations for joining organizations
model UserInvitation {
  id             String           @id @default(cuid())
  organizationId String
  inviterId      String
  inviteeId      String?          // null if inviting by username/email
  
  // Invitation Methods
  inviteeEmail   String?          // Can invite by email
  inviteeUsername String?         // Can invite by username
  
  // Role Assignment
  organizationRole OrganizationRole @default(MEMBER) // Organization-level role
  departmentIds    String?         // JSON array of department IDs (optional)
  departmentRole   DepartmentRole? // Role in departments (if assigned)
  
  // Invitation Details
  message        String?          // Personal invitation message
  
  // Status
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime         // Invitation expiry
  
  // Response
  respondedAt    DateTime?
  response       String?          // Reason for decline
  
  // Timestamps
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relations
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter        User             @relation("InviterUser", fields: [inviterId], references: [id])
  invitee        User?            @relation("InviteeUser", fields: [inviteeId], references: [id])
  
  @@unique([organizationId, inviteeEmail])
  @@unique([organizationId, inviteeUsername])
  @@index([status])
  @@index([expiresAt])
  @@map("user_invitations")
}

// ==========================================
// ORGANIZATION SCHEMA - V1.0
// ==========================================

// prisma/schemas/organization.prisma
// ===== AUTHENTICATION ORGANIZATION SCHEMA - InvenStock V2.0 =====

model Organization {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique // URL-friendly identifier
  description String?
  
  // Contact Information
  email       String?
  phone       String?
  
  // Settings
  status      OrganizationStatus @default(ACTIVE)
  timezone    String             @default("Asia/Bangkok")
  
  // Feature Settings
  allowDepartments    Boolean    @default(true)
  
  // Timestamps
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  // Relations (Authentication Only)
  users       OrganizationUser[]
  departments Department[]       // Keep for department access control
  invitations UserInvitation[]
  auditLogs   AuditLog[]
  
  @@index([slug])
  @@index([status])
  @@map("organizations")
}

// User-Organization Relationship (Many-to-Many)
model OrganizationUser {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  
  // Role & Membership
  roles          OrganizationRole @default(MEMBER)
  isOwner        Boolean      @default(false)
  joinedAt       DateTime     @default(now())
  lastActiveAt   DateTime?
  
  // Status
  isActive       Boolean      @default(true)
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, userId])
  @@index([isActive])
  @@index([roles])
  @@map("organization_users")
}

// Hierarchical Departments (For Access Control)
model Department {
  id             String       @id @default(cuid())
  organizationId String
  parentId       String?      // For hierarchical structure
  
  // Department Details
  name           String
  code           String       // Short code (e.g., "ICU", "OPD", "PHARMACY")
  description    String?
  color          ColorTheme?
  icon           IconType?
  
  // Access Control
  isActive       Boolean      @default(true)
  requiresAccess Boolean      @default(false)  // Requires explicit access permission
  
  // Audit Fields
  createdBy      String       // User who created
  updatedBy      String?      // User who last updated
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent         Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children       Department[] @relation("DepartmentHierarchy")
  departmentUsers DepartmentUser[]  // Users with access to this department
  
  @@unique([organizationId, code])
  @@index([parentId])
  @@index([isActive])
  @@index([requiresAccess])
  @@map("departments")
}

// ==========================================
// AUDIT SCHEMA - V1.0
// ==========================================

// prisma/schemas/audit.prisma
// ===== STREAMLINED AUDIT SYSTEM - InvenStock V2.0 =====

// Single Audit Model - Hybrid Approach
model AuditLog {
  id             String @id @default(cuid())
  organizationId String
  userId         String?
  
  // Action Tracking (Dot Notation)
  action         String      // "products.create", "transfers.approve", "users.login"
  resourceId     String?     // ID of affected record
  
  // Smart Payload Storage
  payload        Json?       // Context-aware data based on action type
  
  // Timestamp
  createdAt      DateTime @default(now())
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User? @relation(fields: [userId], references: [id])
  
  // Optimized Indexes
  @@index([organizationId, createdAt])
  @@index([action])
  @@index([resourceId])
  @@map("audit_logs")
}
